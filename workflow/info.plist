<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>bundleid</key>
	<string>com.kejadlen.darksky</string>
	<key>category</key>
	<string>Internet</string>
	<key>connections</key>
	<dict>
		<key>2A5C0A87-204E-49EA-94A7-8E62BB4EFD8A</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>E4BEE57E-E97D-4B2B-ADC1-988BF006A8CC</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
		<key>3331E3E1-4FAE-41FD-8133-DAB62076AB91</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>E4BEE57E-E97D-4B2B-ADC1-988BF006A8CC</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
		<key>E4BEE57E-E97D-4B2B-ADC1-988BF006A8CC</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>F496E087-4042-44E7-B07E-71986ED6CDBA</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
		<key>FB15D46D-2086-4CE1-BCED-91700E028489</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>E4BEE57E-E97D-4B2B-ADC1-988BF006A8CC</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
	</dict>
	<key>createdby</key>
	<string>Alpha Chen</string>
	<key>description</key>
	<string></string>
	<key>disabled</key>
	<false/>
	<key>name</key>
	<string>Pirate Weather</string>
	<key>objects</key>
	<array>
		<dict>
			<key>config</key>
			<dict>
				<key>concurrently</key>
				<false/>
				<key>escaping</key>
				<integer>0</integer>
				<key>script</key>
				<string>open &quot;https://merrysky.net/forecast/{query}&quot;</string>
				<key>scriptargtype</key>
				<integer>0</integer>
				<key>scriptfile</key>
				<string></string>
				<key>type</key>
				<integer>0</integer>
			</dict>
			<key>type</key>
			<string>alfred.workflow.action.script</string>
			<key>uid</key>
			<string>F496E087-4042-44E7-B07E-71986ED6CDBA</string>
			<key>version</key>
			<integer>2</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>alfredfiltersresults</key>
				<false/>
				<key>alfredfiltersresultsmatchmode</key>
				<integer>0</integer>
				<key>argumenttreatemptyqueryasnil</key>
				<false/>
				<key>argumenttrimmode</key>
				<integer>0</integer>
				<key>argumenttype</key>
				<integer>2</integer>
				<key>escaping</key>
				<integer>102</integer>
				<key>keyword</key>
				<string>weather</string>
				<key>queuedelaycustom</key>
				<integer>3</integer>
				<key>queuedelayimmediatelyinitially</key>
				<true/>
				<key>queuedelaymode</key>
				<integer>0</integer>
				<key>queuemode</key>
				<integer>1</integer>
				<key>runningsubtext</key>
				<string></string>
				<key>script</key>
				<string># THESE VARIABLES MUST BE SET. SEE THE ONEUPDATER README FOR AN EXPLANATION OF EACH.
readonly remote_info_plist=&apos;https://raw.githubusercontent.com/kejadlen/pirate-weather.alfredworkflow/master/workflow/info.plist&apos;
readonly workflow_url=&apos;kejadlen/pirate-weather.alfredworkflow&apos;
readonly download_type=&apos;github_release&apos;
readonly frequency_check=&apos;4&apos;

# FROM HERE ON, CODE SHOULD BE LEFT UNTOUCHED!
function abort {
  echo &quot;${1}&quot; &gt;&amp;2
  exit 1
}

function url_exists {
  curl --silent --location --output /dev/null --fail --range 0-0 &quot;${1}&quot;
}

function notification {
  readonly local notificator=&quot;$(find . -type d -name &apos;Notificator.app&apos;)&quot;
  if [[ -n &quot;${notificator}&quot; ]]; then
    &quot;${notificator}/Contents/Resources/Scripts/notificator&quot; --message &quot;${1}&quot; --title &quot;${alfred_workflow_name}&quot; --subtitle &apos;A new version is available&apos;
    return
  fi

  readonly local terminal_notifier=&quot;$(find . -type f -name &apos;terminal-notifier&apos;)&quot;
  if [[ -n &quot;${terminal_notifier}&quot; ]]; then
    &quot;${terminal_notifier}&quot; -title &quot;${alfred_workflow_name}&quot; -subtitle &apos;A new version is available&apos; -message &quot;${1}&quot;
    return
  fi

  osascript -e &quot;display notification \&quot;${1}\&quot; with title \&quot;${alfred_workflow_name}\&quot; subtitle \&quot;A new version is available\&quot;&quot;
}

# Local sanity checks
readonly local_info_plist=&apos;info.plist&apos;
readonly local_version=&quot;$(/usr/libexec/PlistBuddy -c &apos;print version&apos; &quot;${local_info_plist}&quot;)&quot;

[[ -n &quot;${local_version}&quot; ]] || abort &apos;You need to set a workflow version in the configuration sheet.&apos;
[[ &quot;${download_type}&quot; =~ ^(direct|page|github_release)$ ]] || abort &quot;&apos;download_type&apos; (${download_type}) needs to be one of &apos;direct&apos;, &apos;page&apos;, or &apos;github_release&apos;.&quot;
[[ &quot;${frequency_check}&quot; =~ ^[0-9]+$ ]] || abort &quot;&apos;frequency_check&apos; (${frequency_check}) needs to be a number.&quot;

# Check for updates
if [[ $(find &quot;${local_info_plist}&quot; -mtime +&quot;${frequency_check}&quot;d) ]]; then
  if ! url_exists &quot;${remote_info_plist}&quot;; then abort &quot;&apos;remote_info_plist&apos; (${remote_info_plist}) appears to not be reachable.&quot;; fi # Remote sanity check

  readonly tmp_file=&quot;$(mktemp)&quot;
  curl --silent --location --output &quot;${tmp_file}&quot; &quot;${remote_info_plist}&quot;
  readonly remote_version=&quot;$(/usr/libexec/PlistBuddy -c &apos;print version&apos; &quot;${tmp_file}&quot;)&quot;

  if [[ &quot;${local_version}&quot; == &quot;${remote_version}&quot; ]]; then
    touch &quot;${local_info_plist}&quot; # Reset timer by touching local file
    exit 0
  fi

  if [[ &quot;${download_type}&quot; == &apos;page&apos; ]]; then
    notification &apos;Opening download page…&apos;
    open &quot;${workflow_url}&quot;
    exit 0
  fi

  download_url=&quot;$([[ &quot;${download_type}&quot; == &apos;github_release&apos; ]] &amp;&amp; curl --silent &quot;https://api.github.com/repos/${workflow_url}/releases/latest&quot; | grep &apos;browser_download_url&apos; | head -1 | sed -E &apos;s/.*browser_download_url&quot;: &quot;(.*)&quot;/\1/&apos; || echo &quot;${workflow_url}&quot;)&quot;

  if url_exists &quot;${download_url}&quot;; then
    notification &apos;Downloading and installing…&apos;
    curl --silent --location --output &quot;${HOME}/Downloads/${alfred_workflow_name}.alfredworkflow&quot; &quot;${download_url}&quot;
    open &quot;${HOME}/Downloads/${alfred_workflow_name}.alfredworkflow&quot;
  else
    abort &quot;&apos;workflow_url&apos; (${download_url}) appears to not be reachable.&quot;
  fi
fi</string>
				<key>scriptargtype</key>
				<integer>1</integer>
				<key>scriptfile</key>
				<string></string>
				<key>subtext</key>
				<string></string>
				<key>title</key>
				<string></string>
				<key>type</key>
				<integer>0</integer>
				<key>withspace</key>
				<false/>
			</dict>
			<key>type</key>
			<string>alfred.workflow.input.scriptfilter</string>
			<key>uid</key>
			<string>B9B6DB3D-FF10-4E82-B5F3-AC80EF058E0D</string>
			<key>version</key>
			<integer>3</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>alfredfiltersresults</key>
				<false/>
				<key>alfredfiltersresultsmatchmode</key>
				<integer>0</integer>
				<key>argumenttreatemptyqueryasnil</key>
				<false/>
				<key>argumenttrimmode</key>
				<integer>0</integer>
				<key>argumenttype</key>
				<integer>1</integer>
				<key>escaping</key>
				<integer>127</integer>
				<key>keyword</key>
				<string>weather</string>
				<key>queuedelaycustom</key>
				<integer>3</integer>
				<key>queuedelayimmediatelyinitially</key>
				<false/>
				<key>queuedelaymode</key>
				<integer>1</integer>
				<key>queuemode</key>
				<integer>2</integer>
				<key>runningsubtext</key>
				<string>Retrieving location/weather...</string>
				<key>script</key>
				<string>./dark-sky {query}</string>
				<key>scriptargtype</key>
				<integer>1</integer>
				<key>scriptfile</key>
				<string>pirate-weather</string>
				<key>subtext</key>
				<string></string>
				<key>title</key>
				<string>Pirate Weather</string>
				<key>type</key>
				<integer>8</integer>
				<key>withspace</key>
				<true/>
			</dict>
			<key>type</key>
			<string>alfred.workflow.input.scriptfilter</string>
			<key>uid</key>
			<string>2A5C0A87-204E-49EA-94A7-8E62BB4EFD8A</string>
			<key>version</key>
			<integer>3</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>inputstring</key>
				<string>{query}</string>
				<key>matchcasesensitive</key>
				<true/>
				<key>matchmode</key>
				<integer>1</integer>
				<key>matchstring</key>
				<string></string>
			</dict>
			<key>type</key>
			<string>alfred.workflow.utility.filter</string>
			<key>uid</key>
			<string>E4BEE57E-E97D-4B2B-ADC1-988BF006A8CC</string>
			<key>version</key>
			<integer>1</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>alfredfiltersresults</key>
				<false/>
				<key>alfredfiltersresultsmatchmode</key>
				<integer>0</integer>
				<key>argumenttreatemptyqueryasnil</key>
				<false/>
				<key>argumenttrimmode</key>
				<integer>0</integer>
				<key>argumenttype</key>
				<integer>2</integer>
				<key>escaping</key>
				<integer>102</integer>
				<key>keyword</key>
				<string>forecast</string>
				<key>queuedelaycustom</key>
				<integer>3</integer>
				<key>queuedelayimmediatelyinitially</key>
				<true/>
				<key>queuedelaymode</key>
				<integer>0</integer>
				<key>queuemode</key>
				<integer>1</integer>
				<key>runningsubtext</key>
				<string></string>
				<key>script</key>
				<string># THESE VARIABLES MUST BE SET. SEE THE ONEUPDATER README FOR AN EXPLANATION OF EACH.
readonly remote_info_plist=&apos;https://raw.githubusercontent.com/kejadlen/pirate-weather.alfredworkflow/master/workflow/info.plist&apos;
readonly workflow_url=&apos;kejadlen/pirate-weather.alfredworkflow&apos;
readonly download_type=&apos;github_release&apos;
readonly frequency_check=&apos;4&apos;

# FROM HERE ON, CODE SHOULD BE LEFT UNTOUCHED!
function abort {
  echo &quot;${1}&quot; &gt;&amp;2
  exit 1
}

function url_exists {
  curl --silent --location --output /dev/null --fail --range 0-0 &quot;${1}&quot;
}

function notification {
  readonly local notificator=&quot;$(find . -type d -name &apos;Notificator.app&apos;)&quot;
  if [[ -n &quot;${notificator}&quot; ]]; then
    &quot;${notificator}/Contents/Resources/Scripts/notificator&quot; --message &quot;${1}&quot; --title &quot;${alfred_workflow_name}&quot; --subtitle &apos;A new version is available&apos;
    return
  fi

  readonly local terminal_notifier=&quot;$(find . -type f -name &apos;terminal-notifier&apos;)&quot;
  if [[ -n &quot;${terminal_notifier}&quot; ]]; then
    &quot;${terminal_notifier}&quot; -title &quot;${alfred_workflow_name}&quot; -subtitle &apos;A new version is available&apos; -message &quot;${1}&quot;
    return
  fi

  osascript -e &quot;display notification \&quot;${1}\&quot; with title \&quot;${alfred_workflow_name}\&quot; subtitle \&quot;A new version is available\&quot;&quot;
}

# Local sanity checks
readonly local_info_plist=&apos;info.plist&apos;
readonly local_version=&quot;$(/usr/libexec/PlistBuddy -c &apos;print version&apos; &quot;${local_info_plist}&quot;)&quot;

[[ -n &quot;${local_version}&quot; ]] || abort &apos;You need to set a workflow version in the configuration sheet.&apos;
[[ &quot;${download_type}&quot; =~ ^(direct|page|github_release)$ ]] || abort &quot;&apos;download_type&apos; (${download_type}) needs to be one of &apos;direct&apos;, &apos;page&apos;, or &apos;github_release&apos;.&quot;
[[ &quot;${frequency_check}&quot; =~ ^[0-9]+$ ]] || abort &quot;&apos;frequency_check&apos; (${frequency_check}) needs to be a number.&quot;

# Check for updates
if [[ $(find &quot;${local_info_plist}&quot; -mtime +&quot;${frequency_check}&quot;d) ]]; then
  if ! url_exists &quot;${remote_info_plist}&quot;; then abort &quot;&apos;remote_info_plist&apos; (${remote_info_plist}) appears to not be reachable.&quot;; fi # Remote sanity check

  readonly tmp_file=&quot;$(mktemp)&quot;
  curl --silent --location --output &quot;${tmp_file}&quot; &quot;${remote_info_plist}&quot;
  readonly remote_version=&quot;$(/usr/libexec/PlistBuddy -c &apos;print version&apos; &quot;${tmp_file}&quot;)&quot;

  if [[ &quot;${local_version}&quot; == &quot;${remote_version}&quot; ]]; then
    touch &quot;${local_info_plist}&quot; # Reset timer by touching local file
    exit 0
  fi

  if [[ &quot;${download_type}&quot; == &apos;page&apos; ]]; then
    notification &apos;Opening download page…&apos;
    open &quot;${workflow_url}&quot;
    exit 0
  fi

  download_url=&quot;$([[ &quot;${download_type}&quot; == &apos;github_release&apos; ]] &amp;&amp; curl --silent &quot;https://api.github.com/repos/${workflow_url}/releases/latest&quot; | grep &apos;browser_download_url&apos; | head -1 | sed -E &apos;s/.*browser_download_url&quot;: &quot;(.*)&quot;/\1/&apos; || echo &quot;${workflow_url}&quot;)&quot;

  if url_exists &quot;${download_url}&quot;; then
    notification &apos;Downloading and installing…&apos;
    curl --silent --location --output &quot;${HOME}/Downloads/${alfred_workflow_name}.alfredworkflow&quot; &quot;${download_url}&quot;
    open &quot;${HOME}/Downloads/${alfred_workflow_name}.alfredworkflow&quot;
  else
    abort &quot;&apos;workflow_url&apos; (${download_url}) appears to not be reachable.&quot;
  fi
fi</string>
				<key>scriptargtype</key>
				<integer>1</integer>
				<key>scriptfile</key>
				<string></string>
				<key>subtext</key>
				<string></string>
				<key>title</key>
				<string></string>
				<key>type</key>
				<integer>0</integer>
				<key>withspace</key>
				<false/>
			</dict>
			<key>type</key>
			<string>alfred.workflow.input.scriptfilter</string>
			<key>uid</key>
			<string>E8F22EA9-54D4-4F7D-8AAB-5875A39AE683</string>
			<key>version</key>
			<integer>3</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>alfredfiltersresults</key>
				<false/>
				<key>alfredfiltersresultsmatchmode</key>
				<integer>0</integer>
				<key>argumenttreatemptyqueryasnil</key>
				<false/>
				<key>argumenttrimmode</key>
				<integer>0</integer>
				<key>argumenttype</key>
				<integer>1</integer>
				<key>escaping</key>
				<integer>127</integer>
				<key>keyword</key>
				<string>forecast</string>
				<key>queuedelaycustom</key>
				<integer>3</integer>
				<key>queuedelayimmediatelyinitially</key>
				<false/>
				<key>queuedelaymode</key>
				<integer>1</integer>
				<key>queuemode</key>
				<integer>2</integer>
				<key>runningsubtext</key>
				<string>Retrieving location/weather...</string>
				<key>script</key>
				<string>./dark-sky {query}</string>
				<key>scriptargtype</key>
				<integer>1</integer>
				<key>scriptfile</key>
				<string>pirate-weather</string>
				<key>subtext</key>
				<string></string>
				<key>title</key>
				<string>Pirate Weather</string>
				<key>type</key>
				<integer>8</integer>
				<key>withspace</key>
				<true/>
			</dict>
			<key>type</key>
			<string>alfred.workflow.input.scriptfilter</string>
			<key>uid</key>
			<string>3331E3E1-4FAE-41FD-8133-DAB62076AB91</string>
			<key>version</key>
			<integer>3</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>alfredfiltersresults</key>
				<false/>
				<key>alfredfiltersresultsmatchmode</key>
				<integer>0</integer>
				<key>argumenttreatemptyqueryasnil</key>
				<false/>
				<key>argumenttrimmode</key>
				<integer>0</integer>
				<key>argumenttype</key>
				<integer>2</integer>
				<key>escaping</key>
				<integer>102</integer>
				<key>keyword</key>
				<string>darksky</string>
				<key>queuedelaycustom</key>
				<integer>3</integer>
				<key>queuedelayimmediatelyinitially</key>
				<true/>
				<key>queuedelaymode</key>
				<integer>0</integer>
				<key>queuemode</key>
				<integer>1</integer>
				<key>runningsubtext</key>
				<string></string>
				<key>script</key>
				<string># THESE VARIABLES MUST BE SET. SEE THE ONEUPDATER README FOR AN EXPLANATION OF EACH.
readonly remote_info_plist=&apos;https://raw.githubusercontent.com/kejadlen/pirate-weather.alfredworkflow/master/workflow/info.plist&apos;
readonly workflow_url=&apos;kejadlen/pirate-weather.alfredworkflow&apos;
readonly download_type=&apos;github_release&apos;
readonly frequency_check=&apos;4&apos;

# FROM HERE ON, CODE SHOULD BE LEFT UNTOUCHED!
function abort {
  echo &quot;${1}&quot; &gt;&amp;2
  exit 1
}

function url_exists {
  curl --silent --location --output /dev/null --fail --range 0-0 &quot;${1}&quot;
}

function notification {
  readonly local notificator=&quot;$(find . -type d -name &apos;Notificator.app&apos;)&quot;
  if [[ -n &quot;${notificator}&quot; ]]; then
    &quot;${notificator}/Contents/Resources/Scripts/notificator&quot; --message &quot;${1}&quot; --title &quot;${alfred_workflow_name}&quot; --subtitle &apos;A new version is available&apos;
    return
  fi

  readonly local terminal_notifier=&quot;$(find . -type f -name &apos;terminal-notifier&apos;)&quot;
  if [[ -n &quot;${terminal_notifier}&quot; ]]; then
    &quot;${terminal_notifier}&quot; -title &quot;${alfred_workflow_name}&quot; -subtitle &apos;A new version is available&apos; -message &quot;${1}&quot;
    return
  fi

  osascript -e &quot;display notification \&quot;${1}\&quot; with title \&quot;${alfred_workflow_name}\&quot; subtitle \&quot;A new version is available\&quot;&quot;
}

# Local sanity checks
readonly local_info_plist=&apos;info.plist&apos;
readonly local_version=&quot;$(/usr/libexec/PlistBuddy -c &apos;print version&apos; &quot;${local_info_plist}&quot;)&quot;

[[ -n &quot;${local_version}&quot; ]] || abort &apos;You need to set a workflow version in the configuration sheet.&apos;
[[ &quot;${download_type}&quot; =~ ^(direct|page|github_release)$ ]] || abort &quot;&apos;download_type&apos; (${download_type}) needs to be one of &apos;direct&apos;, &apos;page&apos;, or &apos;github_release&apos;.&quot;
[[ &quot;${frequency_check}&quot; =~ ^[0-9]+$ ]] || abort &quot;&apos;frequency_check&apos; (${frequency_check}) needs to be a number.&quot;

# Check for updates
if [[ $(find &quot;${local_info_plist}&quot; -mtime +&quot;${frequency_check}&quot;d) ]]; then
  if ! url_exists &quot;${remote_info_plist}&quot;; then abort &quot;&apos;remote_info_plist&apos; (${remote_info_plist}) appears to not be reachable.&quot;; fi # Remote sanity check

  readonly tmp_file=&quot;$(mktemp)&quot;
  curl --silent --location --output &quot;${tmp_file}&quot; &quot;${remote_info_plist}&quot;
  readonly remote_version=&quot;$(/usr/libexec/PlistBuddy -c &apos;print version&apos; &quot;${tmp_file}&quot;)&quot;

  if [[ &quot;${local_version}&quot; == &quot;${remote_version}&quot; ]]; then
    touch &quot;${local_info_plist}&quot; # Reset timer by touching local file
    exit 0
  fi

  if [[ &quot;${download_type}&quot; == &apos;page&apos; ]]; then
    notification &apos;Opening download page…&apos;
    open &quot;${workflow_url}&quot;
    exit 0
  fi

  download_url=&quot;$([[ &quot;${download_type}&quot; == &apos;github_release&apos; ]] &amp;&amp; curl --silent &quot;https://api.github.com/repos/${workflow_url}/releases/latest&quot; | grep &apos;browser_download_url&apos; | head -1 | sed -E &apos;s/.*browser_download_url&quot;: &quot;(.*)&quot;/\1/&apos; || echo &quot;${workflow_url}&quot;)&quot;

  if url_exists &quot;${download_url}&quot;; then
    notification &apos;Downloading and installing…&apos;
    curl --silent --location --output &quot;${HOME}/Downloads/${alfred_workflow_name}.alfredworkflow&quot; &quot;${download_url}&quot;
    open &quot;${HOME}/Downloads/${alfred_workflow_name}.alfredworkflow&quot;
  else
    abort &quot;&apos;workflow_url&apos; (${download_url}) appears to not be reachable.&quot;
  fi
fi</string>
				<key>scriptargtype</key>
				<integer>1</integer>
				<key>scriptfile</key>
				<string></string>
				<key>subtext</key>
				<string></string>
				<key>title</key>
				<string></string>
				<key>type</key>
				<integer>0</integer>
				<key>withspace</key>
				<false/>
			</dict>
			<key>type</key>
			<string>alfred.workflow.input.scriptfilter</string>
			<key>uid</key>
			<string>0B8AA955-D21E-4AA4-B659-BF47EA6734F0</string>
			<key>version</key>
			<integer>3</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>alfredfiltersresults</key>
				<false/>
				<key>alfredfiltersresultsmatchmode</key>
				<integer>0</integer>
				<key>argumenttreatemptyqueryasnil</key>
				<false/>
				<key>argumenttrimmode</key>
				<integer>0</integer>
				<key>argumenttype</key>
				<integer>1</integer>
				<key>escaping</key>
				<integer>127</integer>
				<key>keyword</key>
				<string>darksky</string>
				<key>queuedelaycustom</key>
				<integer>3</integer>
				<key>queuedelayimmediatelyinitially</key>
				<false/>
				<key>queuedelaymode</key>
				<integer>1</integer>
				<key>queuemode</key>
				<integer>2</integer>
				<key>runningsubtext</key>
				<string>Retrieving location/weather...</string>
				<key>script</key>
				<string>./dark-sky {query}</string>
				<key>scriptargtype</key>
				<integer>1</integer>
				<key>scriptfile</key>
				<string>pirate-weather</string>
				<key>subtext</key>
				<string></string>
				<key>title</key>
				<string>Pirate Weather</string>
				<key>type</key>
				<integer>8</integer>
				<key>withspace</key>
				<true/>
			</dict>
			<key>type</key>
			<string>alfred.workflow.input.scriptfilter</string>
			<key>uid</key>
			<string>FB15D46D-2086-4CE1-BCED-91700E028489</string>
			<key>version</key>
			<integer>3</integer>
		</dict>
	</array>
	<key>readme</key>
	<string>- `PIRATE_WEATHER_API_KEY`: Get an API key [here][pirate-weather-api-key].
- `PIRATE_WEATHER_ENDPOINT`: Set to `api.darksky.net` to use Dark Sky (until
  the API is deprecated).
- `GOOGLE_API_KEY`: Get an API key [here][google-api-key]. (Used for geocoding
  queries. *This can be omitted if you only want the forecast for the current
  location*.)
- `FORECAST_UNITS`: Defaults to `auto`, which sets the units based on the
  location. Use `si` for Celsius and `us` for Fahrenheit.
- `FORECAST_LANG`: Defaults to `en`. See [Dark Sky
  documentation][dark-sky-lang] for full list of language options.
- `DEFAULT_LAT_LONG`: Set this to override IP geolocation. Ex:
  `47.7396,-122.3426` for Seattle.
- `DEFAULT_LOCATION`: Used for displaying the location name when using
  `DEFAULT_LAT_LONG`.
- `LIGHT_ICONS`: `true` gives white icons, `false` gives black icons.

[env-vars]: https://www.alfredapp.com/help/workflows/advanced/variables/
[pirate-weather-api-key]: https://pirateweather.net/getting-started
[google-api-key]: https://developers.google.com/maps/documentation/geocoding/#api_key
[dark-sky-lang]: https://darksky.net/dev/docs#forecast-request</string>
	<key>uidata</key>
	<dict>
		<key>0B8AA955-D21E-4AA4-B659-BF47EA6734F0</key>
		<dict>
			<key>colorindex</key>
			<integer>12</integer>
			<key>note</key>
			<string>OneUpdater</string>
			<key>xpos</key>
			<real>30</real>
			<key>ypos</key>
			<real>310</real>
		</dict>
		<key>2A5C0A87-204E-49EA-94A7-8E62BB4EFD8A</key>
		<dict>
			<key>xpos</key>
			<real>190</real>
			<key>ypos</key>
			<real>30</real>
		</dict>
		<key>3331E3E1-4FAE-41FD-8133-DAB62076AB91</key>
		<dict>
			<key>xpos</key>
			<real>190</real>
			<key>ypos</key>
			<real>170</real>
		</dict>
		<key>B9B6DB3D-FF10-4E82-B5F3-AC80EF058E0D</key>
		<dict>
			<key>colorindex</key>
			<integer>12</integer>
			<key>note</key>
			<string>OneUpdater</string>
			<key>xpos</key>
			<real>30</real>
			<key>ypos</key>
			<real>30</real>
		</dict>
		<key>E4BEE57E-E97D-4B2B-ADC1-988BF006A8CC</key>
		<dict>
			<key>xpos</key>
			<real>430</real>
			<key>ypos</key>
			<real>60</real>
		</dict>
		<key>E8F22EA9-54D4-4F7D-8AAB-5875A39AE683</key>
		<dict>
			<key>colorindex</key>
			<integer>12</integer>
			<key>note</key>
			<string>OneUpdater</string>
			<key>xpos</key>
			<real>30</real>
			<key>ypos</key>
			<real>170</real>
		</dict>
		<key>F496E087-4042-44E7-B07E-71986ED6CDBA</key>
		<dict>
			<key>xpos</key>
			<real>590</real>
			<key>ypos</key>
			<real>30</real>
		</dict>
		<key>FB15D46D-2086-4CE1-BCED-91700E028489</key>
		<dict>
			<key>xpos</key>
			<real>190</real>
			<key>ypos</key>
			<real>310</real>
		</dict>
	</dict>
	<key>userconfigurationconfig</key>
	<array>
		<dict>
			<key>config</key>
			<dict>
				<key>default</key>
				<string></string>
				<key>placeholder</key>
				<string></string>
				<key>required</key>
				<true/>
				<key>trim</key>
				<true/>
			</dict>
			<key>description</key>
			<string></string>
			<key>label</key>
			<string>Pirate Weather API key</string>
			<key>type</key>
			<string>textfield</string>
			<key>variable</key>
			<string>pirate_weather_api_key</string>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>default</key>
				<string></string>
				<key>placeholder</key>
				<string></string>
				<key>required</key>
				<false/>
				<key>trim</key>
				<true/>
			</dict>
			<key>description</key>
			<string>Used for geocoding queries if you want search to work</string>
			<key>label</key>
			<string>Google API key</string>
			<key>type</key>
			<string>textfield</string>
			<key>variable</key>
			<string>google_api_key</string>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>default</key>
				<false/>
				<key>required</key>
				<false/>
				<key>text</key>
				<string></string>
			</dict>
			<key>description</key>
			<string></string>
			<key>label</key>
			<string>Enable light icons</string>
			<key>type</key>
			<string>checkbox</string>
			<key>variable</key>
			<string>light_icons</string>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>default</key>
				<string>auto</string>
				<key>pairs</key>
				<array>
					<array>
						<string>auto</string>
						<string>auto</string>
					</array>
					<array>
						<string>Celsius</string>
						<string>si</string>
					</array>
					<array>
						<string>Fahrenheit</string>
						<string>us</string>
					</array>
				</array>
			</dict>
			<key>description</key>
			<string></string>
			<key>label</key>
			<string>Forecast units</string>
			<key>type</key>
			<string>popupbutton</string>
			<key>variable</key>
			<string>forecast_units</string>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>default</key>
				<string></string>
				<key>placeholder</key>
				<string>lat,long</string>
				<key>required</key>
				<false/>
				<key>trim</key>
				<true/>
			</dict>
			<key>description</key>
			<string>Set this to override IP geolocation. Ex: 47.7396,-122.3426 for Seattle.</string>
			<key>label</key>
			<string>Default latitude and longitude</string>
			<key>type</key>
			<string>textfield</string>
			<key>variable</key>
			<string>default_lat_long</string>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>default</key>
				<string></string>
				<key>placeholder</key>
				<string></string>
				<key>required</key>
				<false/>
				<key>trim</key>
				<true/>
			</dict>
			<key>description</key>
			<string>Used for displaying the location name with a default latitude and longitude</string>
			<key>label</key>
			<string>Default location name</string>
			<key>type</key>
			<string>textfield</string>
			<key>variable</key>
			<string>default_location</string>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>default</key>
				<string>api.pirateweather.net</string>
				<key>placeholder</key>
				<string></string>
				<key>required</key>
				<true/>
				<key>trim</key>
				<true/>
			</dict>
			<key>description</key>
			<string></string>
			<key>label</key>
			<string>Pirate Weather endpoint</string>
			<key>type</key>
			<string>textfield</string>
			<key>variable</key>
			<string>pirate_weather_endpoint</string>
		</dict>
	</array>
	<key>version</key>
	<string>4.0.1</string>
	<key>webaddress</key>
	<string>http://github.com/kejadlen/pirate-weather.alfredworkflow</string>
</dict>
</plist>